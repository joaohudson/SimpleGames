
import java.awt.Color;
import javax.swing.JPanel;

/**
 * Interface Grafica do Tabuleiro do jogo.
 * 
 * @author Alan Moraes &lt;alan@ci.ufpb.br&gt;
 * @author Leonardo Villeth &lt;lvilleth@cc.ci.ufpb.br&gt;
 * @autor João Hudson.
 */
public class TabuleiroGUI extends JPanel {

    private JanelaPrincipal janela;
    private CasaGUI[][] casas;

    /**
     * Creates new form Tabuleiro
     */
    public TabuleiroGUI() {
        // Construtor sem parametros requerido pela especificação JavaBeans.
    }

    public TabuleiroGUI(JanelaPrincipal janela) {
        this.janela = janela;
        initComponents();
        criarCasas();
    }

    /**
     * Preenche o tabuleiro com 64 casas
     */
    private void criarCasas() {
        casas = new CasaGUI[8][8];
        // De cima para baixo
        for (int j = 7; j >= 0; j--) {
            // Da esquerda para a direita
            for (int i = 0; i < 8; i++) {
                Color cor = calcularCor(i, j);
                CasaGUI casa = new CasaGUI(i, j, cor, this);
                casas[i][j] = casa;
                add(casa);
            }
        }
    }
    
    /**
     * Obtém uma casa gráfica do tabuleiro gráfico.
     * 
     * @param xPosition A posição x da casa gráfica.
     * @param yPosition A posição y da casa gráfica.
     * @return A casa gráfica especificada.
     */
    public CasaGUI getCasa(int xPosition, int yPosition)
    {
        if(xPosition < 8 && yPosition < 8 && xPosition >= 0 && yPosition >= 0)
        {
            return casas[xPosition][yPosition];
        }
        return null;
    }
    
    /**
     * Remove todas as marcações do tabuleiro.
     */
    public void removerMarcacoes()
    {
        for(int y = 0; y < 8; y++)
        {
            for(int x = 0; x < 8; x++)
            {
                casas[x][y].atenuar();
            }
        }
    }

    private Color calcularCor(int i, int j) {
        // linha par
        if (i % 2 == 0) {
            // coluna �mpar
            if (j % 2 == 0) {
                return CasaGUI.COR_ESCURA;
            }
            // coluna �mpar
            else {
                return CasaGUI.COR_CLARA;
            }
        }
        // linha �mpar
        else {
            // coluna par
            if (j % 2 == 0) {
                return CasaGUI.COR_CLARA;
            }
            // coluna �mpar
            else {
                return CasaGUI.COR_ESCURA;
            }
        }

        // c�digo acima em uma linha
        // return (i%2 + j%2)%2 == 0 ? CasaGUI.COR_CLARA : CasaGUI.COR_ESCURA;
    }

    public void atualizar(Jogo jogo) {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                CasaGUI casaGUI = casas[i][j];
                
                Tabuleiro tabuleiro = jogo.getTabuleiro();
                Casa casa = tabuleiro.getCasa(i, j);
                if (!casa.estaVazia()) {
                    Peca peca = casa.getPeca();
                    int tipo = peca.getTipo();
                    casaGUI.colocarPeca(tipo);
                }
                else {
                    casaGUI.removerPeca();
                }
            }
        }
    }

    public JanelaPrincipal getJanela() {
        return janela;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridLayout(8, 8));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
